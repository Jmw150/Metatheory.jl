abstract type NumberFold <: AbstractAnalysis end

using TermInterface

# This should be auto-generated by a macro
function EGraphs.make(an::Type{NumberFold}, g::EGraph, n::ENode)
    # @show n
    operation(n) isa Number && return operation(n)

    if exprhead(n) == :call && arity(n) == 2
        op = operation(n)
        l = geteclass(g, n.args[1])
        r = geteclass(g, n.args[2])
        ldata = getdata(l, an, nothing)
        rdata = getdata(r, an, nothing)

        # @show ldata rdata

        if ldata isa Number && rdata isa Number
            if op == :*
                return ldata * rdata
            elseif op == :+
                return ldata + rdata
            end
        end
    end

    return nothing
end

function EGraphs.join(an::Type{NumberFold}, from, to)
    # println("joining!")
    if from isa Number
        if to isa Number
            @assert from == to
        else return from
        end
    end
    return to
end

function EGraphs.modify!(an::Type{NumberFold}, g::EGraph, id::Int64)
    # !haskey(an, id) && return nothing
    eclass = g.classes[id]
    d = getdata(eclass, an, nothing)
    if d isa Number
        newclass, _ = addexpr!(g, d)
        merge!(g, newclass.id, id)
    end
end

EGraphs.islazy(x::Type{NumberFold}) = false
